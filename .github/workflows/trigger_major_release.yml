# Trigger via gh cli:
# gh workflow run trigger_major_release.yml
name: Trigger Major Release
on:
  workflow_dispatch:
jobs:
  trigger_minor_release:
    runs-on: ubuntu-latest
    env:
      NO_TTY: "1"
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_PAT }}
      - name: "trigger minor release and set new snapshot version"
        run: |
          git config --global user.email "action@github"
          git config --global user.name "Trigger Release Major Action"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          
          SCRIPTS_DIR=".github/workflows/scripts/"
          RELEASE_VERSION=$(.docker/dev_docker.sh gradle -q getVersionWithoutSnapshot)
          RELEASE_BRANCH_NAME=$(.docker/dev_docker.sh gradle -q getReleaseBranchName -Dversion="$RELEASE_VERSION")
          RELEASE_BRANCH="release/$RELEASE_BRANCH_NAME"
          
          # create new release branch from dev and change version
          echo "Release Version: $RELEASE_VERSION"
          git checkout -b $RELEASE_BRANCH
          .docker/dev_docker.sh gradle -q setVersion -Dversion="$RELEASE_VERSION"
          git add -- .
          git commit -a -m "Release $RELEASE_VERSION"
          git push origin $RELEASE_BRANCH

          # merge release branch to main
          # TODO: fix this
          # git fetch --all
          # git merge --strategy-option theirs --allow-unrelated-histories --no-edit origin/main
          # git push
          
          # change version on dev branch
          git checkout dev
          NEW_VERSION=$(sh $SCRIPTS_DIR/increase_major_version.sh "$RELEASE_VERSION")-SNAPSHOT
          echo "New Version: $NEW_VERSION"
          .docker/dev_docker.sh gradle -q setVersion -Dversion="$NEW_VERSION"
          git add -- .
          git commit -a -m "New dev Version $NEW_VERSION"
          git push
